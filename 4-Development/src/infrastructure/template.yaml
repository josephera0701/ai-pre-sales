AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: AWS Cost Estimation Platform - Serverless Infrastructure

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
    Description: Environment name
  
  DomainName:
    Type: String
    Default: aws-cost-estimation.sagesoft.com
    Description: Domain name for the application

Globals:
  Function:
    Runtime: nodejs18.x
    Timeout: 30
    MemorySize: 512
    Environment:
      Variables:
        ENVIRONMENT: !Ref Environment
        MAIN_TABLE: !Ref MainTable
        PRICING_TABLE: !Ref PricingTable
        DOCUMENTS_BUCKET: !Ref DocumentsBucket
        UPLOADS_BUCKET: !Ref UploadsBucket

Resources:
  # API Gateway
  CostEstimationApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Environment
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt UserPool.Arn
      RequestValidators:
        RequestValidator:
          ValidateRequestBody: true
          ValidateRequestParameters: true

  # Lambda Functions
  CostCalculatorFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../lambda/cost-calculator/
      Handler: index.handler
      MemorySize: 512
      Timeout: 30
      Events:
        CalculateCost:
          Type: Api
          Properties:
            RestApiId: !Ref CostEstimationApi
            Path: /calculations/cost
            Method: POST
        CompareCosts:
          Type: Api
          Properties:
            RestApiId: !Ref CostEstimationApi
            Path: /calculations/compare
            Method: POST
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref MainTable
        - DynamoDBReadPolicy:
            TableName: !Ref PricingTable

  ExcelProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../lambda/excel-processor/
      Handler: index.handler
      MemorySize: 1024
      Timeout: 60
      Events:
        ProcessExcel:
          Type: Api
          Properties:
            RestApiId: !Ref CostEstimationApi
            Path: /excel/process
            Method: POST
        ValidateExcel:
          Type: Api
          Properties:
            RestApiId: !Ref CostEstimationApi
            Path: /excel/validate
            Method: POST
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref UploadsBucket
        - DynamoDBCrudPolicy:
            TableName: !Ref MainTable

  DocumentGeneratorFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../lambda/document-generator/
      Handler: index.handler
      MemorySize: 1024
      Timeout: 60
      Events:
        GenerateDocument:
          Type: Api
          Properties:
            RestApiId: !Ref CostEstimationApi
            Path: /documents/generate
            Method: POST
        GetDocument:
          Type: Api
          Properties:
            RestApiId: !Ref CostEstimationApi
            Path: /documents/{documentId}
            Method: GET
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref DocumentsBucket
        - DynamoDBCrudPolicy:
            TableName: !Ref MainTable

  UserManagementFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../lambda/user-management/
      Handler: index.handler
      MemorySize: 256
      Timeout: 15
      Events:
        GetProfile:
          Type: Api
          Properties:
            RestApiId: !Ref CostEstimationApi
            Path: /users/me
            Method: GET
        UpdateProfile:
          Type: Api
          Properties:
            RestApiId: !Ref CostEstimationApi
            Path: /users/me
            Method: PUT
        GetEstimations:
          Type: Api
          Properties:
            RestApiId: !Ref CostEstimationApi
            Path: /estimations
            Method: GET
        CreateEstimation:
          Type: Api
          Properties:
            RestApiId: !Ref CostEstimationApi
            Path: /estimations
            Method: POST
        GetEstimation:
          Type: Api
          Properties:
            RestApiId: !Ref CostEstimationApi
            Path: /estimations/{estimationId}
            Method: GET
        UpdateEstimation:
          Type: Api
          Properties:
            RestApiId: !Ref CostEstimationApi
            Path: /estimations/{estimationId}
            Method: PUT
        DeleteEstimation:
          Type: Api
          Properties:
            RestApiId: !Ref CostEstimationApi
            Path: /estimations/{estimationId}
            Method: DELETE
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref MainTable

  AuthHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../lambda/auth-handler/
      Handler: index.handler
      MemorySize: 256
      Timeout: 15
      Events:
        Login:
          Type: Api
          Properties:
            RestApiId: !Ref CostEstimationApi
            Path: /auth/login
            Method: POST
            Auth:
              Authorizer: NONE
        Refresh:
          Type: Api
          Properties:
            RestApiId: !Ref CostEstimationApi
            Path: /auth/refresh
            Method: POST
            Auth:
              Authorizer: NONE
        Logout:
          Type: Api
          Properties:
            RestApiId: !Ref CostEstimationApi
            Path: /auth/logout
            Method: POST
        ResetPassword:
          Type: Api
          Properties:
            RestApiId: !Ref CostEstimationApi
            Path: /auth/reset-password
            Method: POST
            Auth:
              Authorizer: NONE

  # DynamoDB Tables
  MainTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'aws-cost-platform-${Environment}'
      BillingMode: ON_DEMAND
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
        - AttributeName: GSI1PK
          AttributeType: S
        - AttributeName: GSI1SK
          AttributeType: S
        - AttributeName: GSI2PK
          AttributeType: S
        - AttributeName: GSI2SK
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: GSI1
          KeySchema:
            - AttributeName: GSI1PK
              KeyType: HASH
            - AttributeName: GSI1SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: GSI2
          KeySchema:
            - AttributeName: GSI2PK
              KeyType: HASH
            - AttributeName: GSI2SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      StreamSpecification:
        StreamEnabled: true
        StreamViewType: NEW_AND_OLD_IMAGES
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
        KMSMasterKeyId: !Ref KMSKey

  PricingTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'aws-pricing-data-${Environment}'
      BillingMode: ON_DEMAND
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
        - AttributeName: GSI1PK
          AttributeType: S
        - AttributeName: GSI1SK
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: GSI1
          KeySchema:
            - AttributeName: GSI1PK
              KeyType: HASH
            - AttributeName: GSI1SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      TimeToLiveSpecification:
        AttributeName: TTL
        Enabled: true
      SSESpecification:
        SSEEnabled: true
        KMSMasterKeyId: !Ref KMSKey

  # S3 Buckets
  DocumentsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'aws-cost-estimation-documents-${Environment}-${AWS::AccountId}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldDocuments
            Status: Enabled
            ExpirationInDays: 365
      NotificationConfiguration:
        CloudWatchConfigurations:
          - Event: s3:ObjectCreated:*
            CloudWatchConfiguration:
              LogGroupName: !Ref DocumentsLogGroup

  UploadsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'aws-cost-estimation-uploads-${Environment}-${AWS::AccountId}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Id: DeleteTempFiles
            Status: Enabled
            ExpirationInDays: 1
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, PUT, POST, DELETE]
            AllowedOrigins: ['*']
            MaxAge: 3000

  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'aws-cost-estimation-frontend-${Environment}-${AWS::AccountId}'
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  # Cognito User Pool
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub 'aws-cost-estimation-users-${Environment}'
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
      MfaConfiguration: OPTIONAL
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
      Schema:
        - Name: email
          AttributeDataType: String
          Required: true
          Mutable: true
        - Name: given_name
          AttributeDataType: String
          Required: true
          Mutable: true
        - Name: family_name
          AttributeDataType: String
          Required: true
          Mutable: true
        - Name: custom:role
          AttributeDataType: String
          Required: false
          Mutable: true

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: !Sub 'aws-cost-estimation-client-${Environment}'
      GenerateSecret: false
      ExplicitAuthFlows:
        - ADMIN_NO_SRP_AUTH
        - USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      TokenValidityUnits:
        AccessToken: hours
        IdToken: hours
        RefreshToken: days
      AccessTokenValidity: 1
      IdTokenValidity: 1
      RefreshTokenValidity: 30

  # CloudFront Distribution
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt FrontendBucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudFrontOAI}'
          - Id: ApiOrigin
            DomainName: !Sub '${CostEstimationApi}.execute-api.${AWS::Region}.amazonaws.com'
            CustomOriginConfig:
              HTTPPort: 443
              OriginProtocolPolicy: https-only
        Enabled: true
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # Managed-CachingOptimized
        CacheBehaviors:
          - PathPattern: '/api/*'
            TargetOriginId: ApiOrigin
            ViewerProtocolPolicy: https-only
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # Managed-CachingDisabled
            OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf # Managed-CORS-S3Origin
        PriceClass: PriceClass_100
        ViewerCertificate:
          CloudFrontDefaultCertificate: true

  CloudFrontOAI:
    Type: AWS::CloudFront::OriginAccessIdentity
    Properties:
      OriginAccessIdentityConfig:
        Comment: !Sub 'OAI for ${Environment} frontend bucket'

  # KMS Key
  KMSKey:
    Type: AWS::KMS::Key
    Properties:
      Description: !Sub 'KMS Key for AWS Cost Estimation Platform ${Environment}'
      KeyPolicy:
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 'kms:*'
            Resource: '*'
          - Sid: Allow DynamoDB Service
            Effect: Allow
            Principal:
              Service: dynamodb.amazonaws.com
            Action:
              - kms:Decrypt
              - kms:GenerateDataKey
            Resource: '*'

  KMSKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub 'alias/aws-cost-platform-${Environment}'
      TargetKeyId: !Ref KMSKey

  # CloudWatch Log Groups
  DocumentsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/s3/documents-${Environment}'
      RetentionInDays: 30

  ApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/apigateway/cost-estimation-${Environment}'
      RetentionInDays: 30

  # IAM Roles
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource:
                  - !GetAtt MainTable.Arn
                  - !Sub '${MainTable.Arn}/index/*'
                  - !GetAtt PricingTable.Arn
                  - !Sub '${PricingTable.Arn}/index/*'
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource:
                  - !Sub '${DocumentsBucket}/*'
                  - !Sub '${UploadsBucket}/*'
        - PolicyName: KMSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - kms:Decrypt
                  - kms:GenerateDataKey
                Resource: !GetAtt KMSKey.Arn

Outputs:
  ApiGatewayUrl:
    Description: API Gateway URL
    Value: !Sub 'https://${CostEstimationApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
    Export:
      Name: !Sub '${AWS::StackName}-ApiUrl'

  CloudFrontUrl:
    Description: CloudFront Distribution URL
    Value: !GetAtt CloudFrontDistribution.DomainName
    Export:
      Name: !Sub '${AWS::StackName}-CloudFrontUrl'

  UserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref UserPool
    Export:
      Name: !Sub '${AWS::StackName}-UserPoolId'

  UserPoolClientId:
    Description: Cognito User Pool Client ID
    Value: !Ref UserPoolClient
    Export:
      Name: !Sub '${AWS::StackName}-UserPoolClientId'

  MainTableName:
    Description: Main DynamoDB Table Name
    Value: !Ref MainTable
    Export:
      Name: !Sub '${AWS::StackName}-MainTable'

  DocumentsBucketName:
    Description: Documents S3 Bucket Name
    Value: !Ref DocumentsBucket
    Export:
      Name: !Sub '${AWS::StackName}-DocumentsBucket'